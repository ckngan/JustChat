This document serves as an API that can be updated for contracts between client/servers/loadbalancers

Client API

<--- Updating Client with New RPC --->
// Method the load balancer calls on the clients to update rpc addresses using a struct ChatServer

// address of chat server
type ChatServer struct {
	ServerName string
	ServerRpcAddress string
}


func (cms *ClientMessageService) UpdateRpcChatServer(args *ChatServer, reply *ClientReply)

<--- Servers/Clients sending files to other clients --->


// Method for a client to call another client to transfer file data using a FileData structure

// FileInfoData to build file structure in rpc call
type FileData struct {
	UserName string
	FileName string
	FileSize int64
	Data     []byte
}

func (cms *ClientMessageService) TransferFile(args *FileData, reply *ClientReply)

<--- Servers/Clients sending messages to other clients --->

// Method for server to call client to receive message
func (cms *ClientMessageService) ReceiveMessage(args *ClientMessage, reply *ClientReply)


// Method to handle private rpc messages from clients
func (cms *ClientMessageService) ReceivePrivateMessage(args *ClientMessage, reply *ClientReply)

//ClientInfo struct used when joining storage server
type ClientInfo struct {
	UserName string
	RPC_IPPORT string
}


Load Balancer API

<--- Clients Joining Chat service --->

//Function for receiving a message from a client
func (msgSvc *MessageService) JoinChatService(message *NewClientSetup, reply *ServerReply) error {

	// if user name not taken, server dials RPC address in message.RPCAddress
	// and updates client with new rpc address, then replies WELCOME
	// unless there is error dialing RPC to client then replies DIAL-ERROR
	// otherwise, server replies, USERNAME-TAKEN

	return nil
}


//Function for storage node to announce itself to load balancer
func (nodeSvc *NodeService) NewNode(message *NewNodeSetup, reply *ServerReply) error {
	//if nodeName taken --> reply.errorMessage = "NAME-TAKEN"
	//if no error --> reply.NodeList == ListOfAllNodes ; reply.errorMessage = "SUCCESS"

	return nil
}


Storage/Main server API

<--- Clients Sending Message --->

//Function to join storage server
func (msgSvc *MessageService) ConnectionInit(message *ClientInfo, reply *ServerReply)

// send public message, server handles distribution
func (msgSvc *MessageService) SendPublicMessage(message *ClientMessage, reply *ServerReply)

// send public file, server handles distribution
func (msgSvc *MessageService) SendPublicFile(message *FileData, reply *ServerReply)

// Returns the ip address of the client to send private data
func (msgSvc *MessageService) SendPrivate(message *ClientMessage, reply *ServerReply)

// retrives specified file
func (nodeSvc *NodeService) GetFile(args *FileData, reply *ServerReply)
